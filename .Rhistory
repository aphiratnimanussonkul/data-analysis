print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[index] <- count[index] + 1
}
}
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
}
}
View(count)
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[index] <- count[index] + 1
}
}
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
}
}
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[index] <- 1 + count[index]
}
}
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
}
}
View(count)
View(count)
View(count)
View(temp_vect_nor)
View(count)
View(count)
count[index] <- ++count[index]
# 8. Write an R program to create a vector of random numbers in normal
# distribution and count occurrences of each value.
# vector_normal_dis <- c(rnorm(50, mean = 5, sd = 2))
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[index] <- ++count[index]
}
}
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
}
}
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- as.integer(1)
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[index] <- count[index] + as.integer(1)
}
}
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- as.integer(1)
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
}
}
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[index] <- as.numeric(count[index]) + 1
}
}
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
}
}
View(count)
View(count)
View(temp_vect_nor)
View(temp_vect_nor)
View(temp_vect_nor)
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
isRepeate = F
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[index] <- as.numeric(count[index]) + 1
isRepeate = T
}
}
if (!isRepeate) {
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
}
print(paste("temp_vect_nor = ", temp_vect_nor[index]))
}
isRepeate = F
}
View(count)
View(count)
View(temp_vect_nor)
View(temp_vect_nor)
print(vector_normal_dis)
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
isRepeate = F
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[j] <- as.numeric(count[j]) + 1
isRepeate = T
}
}
if (!isRepeate) {
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
}
}
isRepeate = F
}
View(count)
View(count)
View(temp_vect_nor)
View(temp_vect_nor)
print(vector_normal_dis)
vector_normal_dis <- c(rnorm(50, mean = 5, sd = 2))
# vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
isRepeate = F
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[j] <- as.numeric(count[j]) + 1
isRepeate = T
}
}
if (!isRepeate) {
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
}
}
isRepeate = F
}
View(count)
View(temp_vect_nor)
View(temp_vect_nor)
# 9. Write an R program to read the .csv file and display the content.
grades_set <- read.csv("C:\cygwin64\home\AphiratNimanussonkul\data-analysis\grade_csv.csv", header = TRUE, sep = ",")
# 9. Write an R program to read the .csv file and display the content.
grades_set <- read.csv("C:\\cygwin64\home\AphiratNimanussonkul\data-analysis\grade_csv.csv", header = TRUE, sep = ",")
# 9. Write an R program to read the .csv file and display the content.
grades_set <- read.csv("C:\\cygwin64\\home\\AphiratNimanussonkul\\data-analysis\\grade_csv.csv", header = TRUE, sep = ",")
View(grades_set)
View(grades_set)
# 9. Write an R program to read the .csv file and display the content.
grades_set <- read.csv("C:\\cygwin64\\home\\AphiratNimanussonkul\\data-analysis\\grade_csv.csv", header = TRUE, sep = ",")
View(grades_set)
View(grades_set)
print(grades_set)
# 10. Write an R program to print row 2-3-4 of the .csv file.
print(grades_set[2:4])
# 10. Write an R program to print row 2-3-4 of the .csv file.
print(grades_set[, 2:4])
# 10. Write an R program to print row 2-3-4 of the .csv file.
print(grades_set[2:4, ])
#or
ran_5to5 <- c(sample(-5:5, 100, replace = T))
print(ran_5to5)
# 7. Write an R program to create three vectors a,b,c with 3 integers.
# Combine the three vectors to become a 3×3 matrix where each column
# represents a vector. Print the content of the matrix.
#replace = F is Not random number repeate
a <- c(sample(1:20, 3, replace = F))
b <- c(sample(1:20, 3, replace = F))
c <- c(sample(1:20, 3, replace = F))
name <- readline(prompt = "Enter name: ")
age <- as.integer(readline(prompt = "Enter age: "))
print(paste("Your name is :", name))
print(paste("youe age is : ", age))
name <- readline(prompt = "Enter name: ")
age <- as.integer(readline(prompt = "Enter age: "))
#1. Write an R program to take input from the user (name and age) and
# display the values and their types.
name <- readline(prompt = "Enter name: ")
#as.integer() make sure input will be integer
age <- as.integer(readline(prompt = "Enter age: "))
print(paste("Your name is :", name))
# 2. Write an R program to create a sequence of numbers from 20 to 50
# and find the mean of numbers from 20 to 60 and sum of numbers from
# 51 to 91.
#create a sequence of numbers from 20 to 50
seq_num_20_50 <- seq(from = 20, to = 50, by = 1)
print(paste("youe age is : ", age))
for (i in 44:100) {
if (i %% 2 == 0 & i %% 3 == 0) {
print(paste("i = ", i, " FizzBuzz"))
} else if (i %% 2 == 0) {
print(paste("i = ", i, " Fizz"))
} else if (i %% 3 == 0) {
print(paste("i = ", i, " Buzz"))
} else {
print(i)
}
}
name <- readline(prompt = "Enter name: ")
age <- as.integer(readline(prompt = "Enter age: "))
print(paste("Your name is :", name))
print(paste("youe age is : ", age))
#age_numberic <- as.numeric(age)
print(paste("Your name is :", name))
#age_numberic <- as.numeric(age)
print(paste("Your name is :", name))
#Lab 2
#1. Write an R program to take input from the user (name and age) and
# display the values and their types.
name <- readline(prompt = "Enter name: ")
name <- readline(prompt = "Enter name: ")
age <- as.integer(readline(prompt = "Enter age: "))
age <- as.integer(readline(prompt = "Enter age: "))
name <- readline(prompt = "Enter name: ")
name <- readline(prompt = "Enter name: ")
age <- readline(prompt = "Enter age: ")
class(age)
age <- as.integer(readline(prompt = "Enter age: "))
age <- as.integer(readline(prompt = "Enter age: "))
age <- as.integer(readline(prompt = "Enter age: "))
vector_normal_dis <- c(rnorm(50, mean = 5, sd = 2))
# vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
isRepeate = F
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[j] <- as.numeric(count[j]) + 1
isRepeate = T
}
}
if (!isRepeate) {
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
}
}
isRepeate = F
}
print(vector_normal_dis)
vector_normal_dis <- c(sample(1:20, 50, replace = T))
vector_normal_dis <- c(sample(1:20, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
isRepeate = F
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[j] <- as.numeric(count[j]) + 1
isRepeate = T
}
}
if (!isRepeate) {
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
}
}
isRepeate = F
}
print(vector_normal_dis)
View(temp_vect_nor)
View(temp_vect_nor)
View(count)
View(count)
summary_repeate <- cbin(unlist(temp_vect_nor), unlist(count))
summary_repeate <- cbind(unlist(temp_vect_nor), unlist(count))
View(summary_repeate)
View(summary_repeate)
vector_normal_dis <- c(sample(1:25, 50, replace = T))
count = list()
temp_vect_nor = list()
index = 0
isRepeate = F
for (i in vector_normal_dis) {
print(i)
if (index == 0) {
index <- index + 1
print("index = 1")
temp_vect_nor[index] <- i
count[index] <- 1
} else {
for (j in 1:index) {
print(paste("j  = ", temp_vect_nor[j]))
if (temp_vect_nor[j] == i) {
count[j] <- as.numeric(count[j]) + 1
isRepeate = T
}
}
if (!isRepeate) {
index <- index + 1
temp_vect_nor[index] <- i
count[index] <- 1
}
}
isRepeate = F
}
summary_repeate <- cbind(unlist(temp_vect_nor), unlist(count))
print(vector_normal_dis)
View(summary_repeate)
View(summary_repeate)
count_re <- table(temp_vect_nor)
View(count_re)
count_re <- table(vector_normal_dis)
View(count_re)
View(count)
View(count)
# การสร้างโมเดลทรีด้วย package rpart
# เราสามารถสร้างโมเดลทรีด้วยฟังกชัน ์ rpart( ) ซึ่งอยูใน ่ package rpart และทดสอบข้อมูล Test ด้วย
# ฟังกชัน ์ predict( ) ในที่นี้จะใช้กบข้อมูล ั bodyfat
titanic_train <- read.csv("C://cygwin64//home//AphiratNimanussonkul//data-analysis/titanic_train.csv")
titanic_test <- read.csv("C://cygwin64//home//AphiratNimanussonkul//data-analysis/titanic_test.csv")
titanic_train$Survived <- as.factor(titanic_train$Survived)
titanic_test$Survived <- as.factor(titanic_test$Survived)
library(rpart)
library(rpart.plot)
#create model
tree_fit <- rpart(Survived ~ ., data = titanic_train)
#test model
p <- predict(tree_fit, newdata = titanic_test, type = "class")
mean(p == titanic_test$Survived)
rpart.plot(tree_fit)
table(p, titinic_test$Survived)
table(p, titanic_test$Survived)
Sys.setlocale(locale = "Thai")
tree_fit <- prune(tree_fit, cp = 0.444444)
#test model
#type = class is ต้องระบุการ predict class => classification
p <- predict(tree_fit, newdata = titanic_test, type = "class")
#หาค่าความแม่นยำของ Model จะได้ค่า 0.901 * 100 %
mean(p == titanic_test$Survived)
table(p, titanic_test$Survived)
library(mboost)
library(mboost)
data("bodyfat", package = "mboost")
# การสร้างโมเดลทรีด้วย package rpart
# เราสามารถสร้างโมเดลทรีด้วยฟังกชัน ์ rpart( ) ซึ่งอยูใน ่ package rpart และทดสอบข้อมูล Test ด้วย
# ฟังกชัน ์ predict( ) ในที่นี้จะใช้กบข้อมูล ั bodyfat
titanic_train <- read.csv("C://cygwin64//home//AphiratNimanussonkul//data-analysis/titanic_train.csv")
titanic_test <- read.csv("C://cygwin64//home//AphiratNimanussonkul//data-analysis/titanic_test.csv")
#as.factor ใช้แปลงค่า int จาก คอลัม survied ให้เป็นตัวแปร factor tree ต้องใช้ ตัวแปรแบบ factor เท่าน้น
titanic_train$Survived <- as.factor(titanic_train$Survived)
titanic_test$Survived <- as.factor(titanic_test$Survived)
# การสร้างโมเดลทรีด้วย package rpart
# เราสามารถสร้างโมเดลทรีด้วยฟังกชัน ์ rpart( ) ซึ่งอยูใน ่ package rpart และทดสอบข้อมูล Test ด้วย
# ฟังกชัน ์ predict( ) ในที่นี้จะใช้กบข้อมูล ั bodyfat
titanic_train <- read.csv("C://cygwin64//home//AphiratNimanussonkul//data-analysis/titanic_train.csv")
titanic_test <- read.csv("C://cygwin64//home//AphiratNimanussonkul//data-analysis/titanic_test.csv")
#as.factor ใช้แปลงค่า int จาก คอลัม survied ให้เป็นตัวแปร factor tree ต้องใช้ ตัวแปรแบบ factor เท่าน้น
titanic_train$Survived <- as.factor(titanic_train$Survived)
titanic_test$Survived <- as.factor(titanic_test$Survived)
rf <- randomForest(Survived ~ ., data = titanic_train, ntree = 100)
library(randomForest)
# การสร้างโมเดล Random Forest (กลุ่มของโมเดลทรี)
# โดยใช้ฟังกชัน ์ randomForest( ) จาก package randomForest
# ข้อ ด้อยของฟังกชันนี ์ ้คือ
# 1.ไม่สามารถใช้กบข้อมูลที่มี ั missing value (จะต้องจัดการกบั missing valueก่อนท างาน)
# 2. แต่ละคอลัมน์ที่เป็นชนิด categorical จะมีค่าที่ต่างกนไม ั ่เกิน 32 ค่า (อาจจะใช้ cforest( ) จาก package party
#                                                                                   แทนก็ได้เพราะไม่มีข้อจ ากดนี ั ้)
# ในที่นี้จะใช้ข้อมูล iris ในการศึกษาและทดสอบ
library(party)
library(randomForest)
rf <- randomForest(Survived ~ ., data = titanic_train, ntree = 100)
p <- predict(rf, newdata = titanic_test)
mean(p == titanic_test$Survived)
plot(p)
plot(rf)
plot(margin(rf, titanic_test$Survived))
pdf("script_pdf.pdf")
#Unit 3 Data Exploration
#dim() => ??????????????????????????? row,  cow,
#names() => ????????????????????? col
#str() => ?????????????????????????????? data frame
#attributs() => ???????????????????????? col , ?????????????????? (class) ????????? data ???????????? data.frame, ???????????? rows
dim(iris)
#row = 150, col = 5
names(iris)
#"Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"  "Species"
str(iris)
attributes(iris)
graphics.off()
